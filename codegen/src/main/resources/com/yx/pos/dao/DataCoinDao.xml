<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yx.pos.dao.DataCoinDao">
    <resultMap id="DataCoin" type="com.yx.pos.model.DataCoin">
		<result property= "coinNo" column="coin_no" jdbcType="VARCHAR" />
		<result property= "coinName" column="coin_name" jdbcType="VARCHAR" />
		<result property= "coinRate" column="coin_rate" jdbcType="NUMERIC" />
		<result property= "isSysFlag" column="IsSysFlag" jdbcType="VARCHAR" />
		<result property= "updateFlow" column="update_flow" jdbcType="NUMERIC" />
		<result property= "updateTime" column="update_time" jdbcType="TIMESTAMP" />
		<result property= "updateBranch" column="update_branch" jdbcType="VARCHAR" />
		<result property= "createDate" column="create_date" jdbcType="TIMESTAMP" />
		<result property= "createMan" column="create_man" jdbcType="VARCHAR" />
		<result property= "modifyDate" column="modify_date" jdbcType="TIMESTAMP" />
		<result property= "modifyMan" column="modify_man" jdbcType="VARCHAR" />
		<result property= "coinCode" column="coin_code" jdbcType="VARCHAR" />
		<result property= "transUpflag" column="trans_upflag" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="whereId">
        id=#{id}
    </sql>

    <sql id="columns">
            coin_no,
            coin_name,
            coin_rate,
            IsSysFlag,
            update_flow,
            update_time,
            update_branch,
            create_date,
            create_man,
            modify_date,
            modify_man,
            coin_code,
            trans_upflag
    </sql>

    <sql id="dynamicWhere">
        <where>
       	<if test="coinNo != null"> AND coin_no like '%${coinNo}%' </if>
       	<if test="coinName != null"> AND coin_name like '%${coinName}%' </if>
       	<if test="coinRate != null"> AND coin_rate like '%${coinRate}%' </if>
       	<if test="isSysFlag != null"> AND IsSysFlag like '%${isSysFlag}%' </if>
       	<if test="updateFlow != null"> AND update_flow like '%${updateFlow}%' </if>
       	<if test="updateTimeStart != null"> AND  update_time <![CDATA[ >= ]]> #{updateTimeStart} AND update_time <![CDATA[ < ]]> #{updateTimeEnd}</if>
       	<if test="updateBranch != null"> AND update_branch like '%${updateBranch}%' </if>
       	<if test="createDateStart != null"> AND  create_date <![CDATA[ >= ]]> #{createDateStart} AND create_date <![CDATA[ < ]]> #{createDateEnd}</if>
       	<if test="createMan != null"> AND create_man like '%${createMan}%' </if>
       	<if test="modifyDateStart != null"> AND  modify_date <![CDATA[ >= ]]> #{modifyDateStart} AND modify_date <![CDATA[ < ]]> #{modifyDateEnd}</if>
       	<if test="modifyMan != null"> AND modify_man like '%${modifyMan}%' </if>
       	<if test="coinCode != null"> AND coin_code like '%${coinCode}%' </if>
       	<if test="transUpflag != null"> AND trans_upflag like '%${transUpflag}%' </if>
        </where>
    </sql>

    <sql id="oneWhere">
        <where>
       	<if test="coinNo != null"> AND coin_no = #{coinNo}</if>
       	<if test="coinName != null"> AND coin_name = #{coinName}</if>
       	<if test="coinRate != null"> AND coin_rate = #{coinRate}</if>
       	<if test="isSysFlag != null"> AND IsSysFlag = #{isSysFlag}</if>
       	<if test="updateFlow != null"> AND update_flow = #{updateFlow}</if>
       	<if test="updateTimeStart != null"> AND update_time <![CDATA[ >= ]]> #{updateTimeStart} AND update_time <![CDATA[ < ]]> #{updateTimeEnd}</if>
       	<if test="updateBranch != null"> AND update_branch = #{updateBranch}</if>
       	<if test="createDateStart != null"> AND create_date <![CDATA[ >= ]]> #{createDateStart} AND create_date <![CDATA[ < ]]> #{createDateEnd}</if>
       	<if test="createMan != null"> AND create_man = #{createMan}</if>
       	<if test="modifyDateStart != null"> AND modify_date <![CDATA[ >= ]]> #{modifyDateStart} AND modify_date <![CDATA[ < ]]> #{modifyDateEnd}</if>
       	<if test="modifyMan != null"> AND modify_man = #{modifyMan}</if>
       	<if test="coinCode != null"> AND coin_code = #{coinCode}</if>
       	<if test="transUpflag != null"> AND trans_upflag = #{transUpflag}</if>
        </where>
    </sql>

    <insert id="create" parameterType="com.yx.pos.model.DataCoin">
        INSERT INTO t_data_coin
        (<include refid="columns"/>)
        VALUES(
                #{coinNo,jdbcType=VARCHAR},
                #{coinName,jdbcType=VARCHAR},
                #{coinRate,jdbcType=NUMERIC},
                #{isSysFlag,jdbcType=VARCHAR},
                #{updateFlow,jdbcType=NUMERIC},
                #{updateTime,jdbcType=TIMESTAMP},
                #{updateBranch,jdbcType=VARCHAR},
                #{createDate,jdbcType=TIMESTAMP},
                #{createMan,jdbcType=VARCHAR},
                #{modifyDate,jdbcType=TIMESTAMP},
                #{modifyMan,jdbcType=VARCHAR},
                #{coinCode,jdbcType=VARCHAR},
                #{transUpflag,jdbcType=VARCHAR}
        )
    </insert>

    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM t_data_coin
        WHERE
        <include refid="whereId"/>
    </delete>
    <update id="update" parameterType="com.yx.pos.model.DataCoin">
        UPDATE t_data_coin SET
                coin_no=#{coinNo,jdbcType=VARCHAR},
                coin_name=#{coinName,jdbcType=VARCHAR},
                coin_rate=#{coinRate,jdbcType=NUMERIC},
                IsSysFlag=#{isSysFlag,jdbcType=VARCHAR},
                update_flow=#{updateFlow,jdbcType=NUMERIC},
                update_time=#{updateTime,jdbcType=TIMESTAMP},
                update_branch=#{updateBranch,jdbcType=VARCHAR},
                create_date=#{createDate,jdbcType=TIMESTAMP},
                create_man=#{createMan,jdbcType=VARCHAR},
                modify_date=#{modifyDate,jdbcType=TIMESTAMP},
                modify_man=#{modifyMan,jdbcType=VARCHAR},
                coin_code=#{coinCode,jdbcType=VARCHAR},
                trans_upflag=#{transUpflag,jdbcType=VARCHAR}
        WHERE
        <include refid="whereId"/>
    </update>

    <select id="get" parameterType="java.lang.Long" resultMap="DataCoin">
        SELECT <include refid="columns"/>
        FROM t_data_coin
        WHERE
        <include refid="whereId"/>
    </select>

    <select id="query" resultMap="DataCoin">
        SELECT <include refid="columns"/>
        FROM t_data_coin
        <include refid="dynamicWhere" />
    </select>
    <select id="search" resultMap="DataCoin">
        SELECT <include refid="columns"/>
        FROM t_data_coin
        <include refid="dynamicWhere" />
    </select>
    <select id="getOne" resultMap="DataCoin">
        SELECT <include refid="columns"/>
        FROM t_data_coin
        <include refid="oneWhere" />
    </select>

    <select id="getList" resultMap="DataCoin">
        SELECT <include refid="columns"/>
        FROM t_data_coin
        <include refid="oneWhere" />
    </select>

    <select id="getAll" resultMap="DataCoin">
        SELECT <include refid="columns"/>
        FROM t_data_coin
    </select>
</mapper>